@model AnnualReports.Web.ViewModels.FundModels.FundAddViewModel

@{
    ViewBag.Title = "Create new Fund";
}

<h2>Create new Fund</h2>

<div data-ng-app="app" data-ng-controller="AddFundCtrl as vm">
    <div block-ui="main" class="block-ui-main row" ng-cloak>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.FundNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FundNumber, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FundNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @*@Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })*@
                        <div class='input-group'>
                            <input type="text" name="Year" id="Year" data-ng-model="vm.year" class="form-control" readonly=""
                                   data-datetimepicker data-options="vm.yearPickerOptions"
                                   on-change="vm.getFunds()" required="" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                        @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MapToFundId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <ui-select name="funds" ng-model="vm.mapToFund" data-ng-required="vm.year" data-ng-disabled="!vm.year" data-on-select="vm.selectMapToFund()">
                            <ui-select-match allow-clear="true" placeholder="Select which fund it should map to, or leave it empty">
                                <span ng-bind="$select.selected.displayName + ' (' + $select.selected.fundNumber + ')'"></span>
                            </ui-select-match>
                            <ui-select-choices repeat="fund in (vm.funds | filter: $select.search) track by fund.id">
                                <span ng-bind="fund.displayName + ' (' + fund.fundNumber + ')'"></span>
                            </ui-select-choices>
                        </ui-select>
                        <label class="label label-warning">If this fund should map to itself, then leave this field empty</label>
                    </div>
                    @Html.EditorFor(model => model.MapToFundId, new { htmlAttributes = new { @class = "hide" } })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DbSource, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.DbSource, Model.AvailableDbSources, "--Select DB Source--", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DbSource, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MCAG, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.MCAG, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MCAG, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.IsActive)
                            @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/plugins")
    @Scripts.Render("~/bundles/angular")
    <script type="text/javascript">
        (function () {
            'use strict';

            angular
                .module('app', ['ae-datetimepicker', 'ui.select', 'blockUI'])
                .config(configure)
                .controller('AddFundCtrl', AddFundCtrl);;

            configure.$inject = ['$httpProvider', '$locationProvider', 'blockUIConfig'];
            AddFundCtrl.$inject = ['$http', 'blockUI', '$timeout'];

            function configure($httpProvider, $locationProvider, blockUIConfig) {
                $locationProvider.html5Mode(true);
                blockUIConfig.autoInjectBodyBlock = false;
            }

            function AddFundCtrl($http, blockUI, $timeout) {
                var vm = this;
                vm.year = undefined;
                vm.funds = [];
                vm.mapToFund = undefined;
                vm.yearPickerOptions = {
                    viewMode: 'years',
                    format: 'YYYY',
                    showTodayButton: true,
                    ignoreReadonly: true,
                    useCurrent: false
                };
                vm.getFunds = getFunds;
                vm.selectMapToFund = selectMapToFund;

                /////////////////////////////////////

                function getFunds() {
                    vm.mapToFund = undefined;
                    $timeout(function () {
                        blockUI.message('Loading funds ...');
                    }, 0);
                    var selectedYear = new Date(vm.year).getFullYear();
                    $http.get('/api/funds/primary/' + selectedYear).then(function (result) {
                        vm.funds = result.data;
                    });
                }

                function selectMapToFund() {
                    if (vm.mapToFund)
                        $('#MapToFundId').val(vm.mapToFund.id);
                    else
                        $('#MapToFundId').val('');
                }
            }
        })();
    </script>
}